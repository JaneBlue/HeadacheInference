//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:2.0.50727.5466
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

// 
// 此源代码是由 Microsoft.VSDesigner 2.0.50727.5466 版自动生成。
// 
#pragma warning disable 1591

namespace HeadacheCDSSTest.localhost {
    using System.Diagnostics;
    using System.Web.Services;
    using System.ComponentModel;
    using System.Web.Services.Protocols;
    using System;
    using System.Xml.Serialization;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="InferenceServiceSoap", Namespace="http://tempuri.org/")]
    public partial class InferenceService : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback DoInferenceOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public InferenceService() {
            this.Url = global::HeadacheCDSSTest.Properties.Settings.Default.HeadacheCDSSTest_localhost_InferenceService;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event DoInferenceCompletedEventHandler DoInferenceCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/DoInference", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool DoInference(InputData InputDataValue, ref string strResult) {
            object[] results = this.Invoke("DoInference", new object[] {
                        InputDataValue,
                        strResult});
            strResult = ((string)(results[1]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void DoInferenceAsync(InputData InputDataValue, string strResult) {
            this.DoInferenceAsync(InputDataValue, strResult, null);
        }
        
        /// <remarks/>
        public void DoInferenceAsync(InputData InputDataValue, string strResult, object userState) {
            if ((this.DoInferenceOperationCompleted == null)) {
                this.DoInferenceOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDoInferenceOperationCompleted);
            }
            this.InvokeAsync("DoInference", new object[] {
                        InputDataValue,
                        strResult}, this.DoInferenceOperationCompleted, userState);
        }
        
        private void OnDoInferenceOperationCompleted(object arg) {
            if ((this.DoInferenceCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DoInferenceCompleted(this, new DoInferenceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.5420")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public partial class InputData {
        
        private float m_nHeadache_Duration_PerTimeField;
        
        private string m_nHeadache_Duration_PerTime_UnitField;
        
        private string m_strHeadacheTypeField;
        
        private int m_nHeadache_TotalNumberField;
        
        private int m_nHeadache_DurationField;
        
        private int m_nHeadache_Monthly_DurationField;
        
        private int m_nTriptan_Total_Drugin_DurationField;
        
        private int m_nTriptan_Drugin_MonthlyField;
        
        private int m_nNon_Triptan_Total_Drugin_DurationField;
        
        private int m_nNon_Triptan_Drugin_MonthlyField;
        
        private HeadacheAssociatedSymptoms[] m_HeadacheAssociatedSymptonListField;
        
        private HeadacheAura[] m_HeadacheAuraListField;
        
        private HeadacheLocation m_HeadacheLocationField;
        
        private bool m_bPeriodismField;
        
        private bool m_bWorsen_By_Physicial_ActivityField;
        
        private HeadacheDegree m_nHeadacheDegreeField;
        
        private HeadacheProperty m_nHeadahcePropertyField;
        
        private bool m_bDaily_HeadacheField;
        
        /// <remarks/>
        public float m_nHeadache_Duration_PerTime {
            get {
                return this.m_nHeadache_Duration_PerTimeField;
            }
            set {
                this.m_nHeadache_Duration_PerTimeField = value;
            }
        }
        
        /// <remarks/>
        public string m_nHeadache_Duration_PerTime_Unit {
            get {
                return this.m_nHeadache_Duration_PerTime_UnitField;
            }
            set {
                this.m_nHeadache_Duration_PerTime_UnitField = value;
            }
        }
        
        /// <remarks/>
        public string m_strHeadacheType {
            get {
                return this.m_strHeadacheTypeField;
            }
            set {
                this.m_strHeadacheTypeField = value;
            }
        }
        
        /// <remarks/>
        public int m_nHeadache_TotalNumber {
            get {
                return this.m_nHeadache_TotalNumberField;
            }
            set {
                this.m_nHeadache_TotalNumberField = value;
            }
        }
        
        /// <remarks/>
        public int m_nHeadache_Duration {
            get {
                return this.m_nHeadache_DurationField;
            }
            set {
                this.m_nHeadache_DurationField = value;
            }
        }
        
        /// <remarks/>
        public int m_nHeadache_Monthly_Duration {
            get {
                return this.m_nHeadache_Monthly_DurationField;
            }
            set {
                this.m_nHeadache_Monthly_DurationField = value;
            }
        }
        
        /// <remarks/>
        public int m_nTriptan_Total_Drugin_Duration {
            get {
                return this.m_nTriptan_Total_Drugin_DurationField;
            }
            set {
                this.m_nTriptan_Total_Drugin_DurationField = value;
            }
        }
        
        /// <remarks/>
        public int m_nTriptan_Drugin_Monthly {
            get {
                return this.m_nTriptan_Drugin_MonthlyField;
            }
            set {
                this.m_nTriptan_Drugin_MonthlyField = value;
            }
        }
        
        /// <remarks/>
        public int m_nNon_Triptan_Total_Drugin_Duration {
            get {
                return this.m_nNon_Triptan_Total_Drugin_DurationField;
            }
            set {
                this.m_nNon_Triptan_Total_Drugin_DurationField = value;
            }
        }
        
        /// <remarks/>
        public int m_nNon_Triptan_Drugin_Monthly {
            get {
                return this.m_nNon_Triptan_Drugin_MonthlyField;
            }
            set {
                this.m_nNon_Triptan_Drugin_MonthlyField = value;
            }
        }
        
        /// <remarks/>
        public HeadacheAssociatedSymptoms[] m_HeadacheAssociatedSymptonList {
            get {
                return this.m_HeadacheAssociatedSymptonListField;
            }
            set {
                this.m_HeadacheAssociatedSymptonListField = value;
            }
        }
        
        /// <remarks/>
        public HeadacheAura[] m_HeadacheAuraList {
            get {
                return this.m_HeadacheAuraListField;
            }
            set {
                this.m_HeadacheAuraListField = value;
            }
        }
        
        /// <remarks/>
        public HeadacheLocation m_HeadacheLocation {
            get {
                return this.m_HeadacheLocationField;
            }
            set {
                this.m_HeadacheLocationField = value;
            }
        }
        
        /// <remarks/>
        public bool m_bPeriodism {
            get {
                return this.m_bPeriodismField;
            }
            set {
                this.m_bPeriodismField = value;
            }
        }
        
        /// <remarks/>
        public bool m_bWorsen_By_Physicial_Activity {
            get {
                return this.m_bWorsen_By_Physicial_ActivityField;
            }
            set {
                this.m_bWorsen_By_Physicial_ActivityField = value;
            }
        }
        
        /// <remarks/>
        public HeadacheDegree m_nHeadacheDegree {
            get {
                return this.m_nHeadacheDegreeField;
            }
            set {
                this.m_nHeadacheDegreeField = value;
            }
        }
        
        /// <remarks/>
        public HeadacheProperty m_nHeadahceProperty {
            get {
                return this.m_nHeadahcePropertyField;
            }
            set {
                this.m_nHeadahcePropertyField = value;
            }
        }
        
        /// <remarks/>
        public bool m_bDaily_Headache {
            get {
                return this.m_bDaily_HeadacheField;
            }
            set {
                this.m_bDaily_HeadacheField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.5420")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public enum HeadacheAssociatedSymptoms {
        
        /// <remarks/>
        Nausea,
        
        /// <remarks/>
        Vomit,
        
        /// <remarks/>
        Fair_Of_Sound,
        
        /// <remarks/>
        Fire_Of_Light,
        
        /// <remarks/>
        Ipsilateral_Heyelids_Swelling,
        
        /// <remarks/>
        Miosis_or_Blepharoptosis,
        
        /// <remarks/>
        Conjunctival_congestion_or_Tears,
        
        /// <remarks/>
        Frontal_facial_Sweating,
        
        /// <remarks/>
        Blocked_or_Watery_Nose,
        
        /// <remarks/>
        Dysphoria,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.5420")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public enum HeadacheAura {
        
        /// <remarks/>
        Hemi_Visual_Aura,
        
        /// <remarks/>
        Bilateral_Visual_Aura,
        
        /// <remarks/>
        Feeling_Aura,
        
        /// <remarks/>
        Allolalia,
        
        /// <remarks/>
        Dyscinesia,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.5420")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public enum HeadacheLocation {
        
        /// <remarks/>
        Uni_Pain,
        
        /// <remarks/>
        Bi_Pain,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.5420")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public enum HeadacheDegree {
        
        /// <remarks/>
        Mild,
        
        /// <remarks/>
        Middle,
        
        /// <remarks/>
        Heavy,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.5420")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public enum HeadacheProperty {
        
        /// <remarks/>
        Pulse_Pain,
        
        /// <remarks/>
        Pressure_Pain,
        
        /// <remarks/>
        Electric_Shock_Like_Pain,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    public delegate void DoInferenceCompletedEventHandler(object sender, DoInferenceCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DoInferenceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DoInferenceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string strResult {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
}

#pragma warning restore 1591